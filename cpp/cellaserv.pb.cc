// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cellaserv.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cellaserv.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cellaserv {

namespace {

const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_reflection_ = NULL;
const ::google::protobuf::Descriptor* Reply_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Reply_Error_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Reply_Error_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Subscribe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Subscribe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Publish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Publish_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cellaserv_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_cellaserv_2eproto() {
  protobuf_AddDesc_cellaserv_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cellaserv.proto");
  GOOGLE_CHECK(file != NULL);
  Message_descriptor_ = file->message_type(0);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, content_),
  };
  Message_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      -1,
      -1,
      -1,
      sizeof(Message),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _is_default_instance_));
  Message_MessageType_descriptor_ = Message_descriptor_->enum_type(0);
  Register_descriptor_ = file->message_type(1);
  static const int Register_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, identification_),
  };
  Register_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      -1,
      -1,
      -1,
      sizeof(Register),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _is_default_instance_));
  Request_descriptor_ = file->message_type(2);
  static const int Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, service_identification_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, id_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      -1,
      -1,
      -1,
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _is_default_instance_));
  Reply_descriptor_ = file->message_type(3);
  static const int Reply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, id_),
  };
  Reply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reply_descriptor_,
      Reply::default_instance_,
      Reply_offsets_,
      -1,
      -1,
      -1,
      sizeof(Reply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply, _is_default_instance_));
  Reply_Error_descriptor_ = Reply_descriptor_->nested_type(0);
  static const int Reply_Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_Error, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_Error, what_),
  };
  Reply_Error_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Reply_Error_descriptor_,
      Reply_Error::default_instance_,
      Reply_Error_offsets_,
      -1,
      -1,
      -1,
      sizeof(Reply_Error),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_Error, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Reply_Error, _is_default_instance_));
  Reply_Error_Type_descriptor_ = Reply_Error_descriptor_->enum_type(0);
  Subscribe_descriptor_ = file->message_type(4);
  static const int Subscribe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, event_),
  };
  Subscribe_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Subscribe_descriptor_,
      Subscribe::default_instance_,
      Subscribe_offsets_,
      -1,
      -1,
      -1,
      sizeof(Subscribe),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subscribe, _is_default_instance_));
  Publish_descriptor_ = file->message_type(5);
  static const int Publish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, data_),
  };
  Publish_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Publish_descriptor_,
      Publish::default_instance_,
      Publish_offsets_,
      -1,
      -1,
      -1,
      sizeof(Publish),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Publish, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cellaserv_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reply_descriptor_, &Reply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Reply_Error_descriptor_, &Reply_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Subscribe_descriptor_, &Subscribe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Publish_descriptor_, &Publish::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cellaserv_2eproto() {
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Register::default_instance_;
  delete Register_reflection_;
  delete Request::default_instance_;
  delete Request_reflection_;
  delete Reply::default_instance_;
  delete Reply_reflection_;
  delete Reply_Error::default_instance_;
  delete Reply_Error_reflection_;
  delete Subscribe::default_instance_;
  delete Subscribe_reflection_;
  delete Publish::default_instance_;
  delete Publish_reflection_;
}

void protobuf_AddDesc_cellaserv_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_cellaserv_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017cellaserv.proto\022\tcellaserv\"\231\001\n\007Message"
    "\022,\n\004type\030\001 \001(\0162\036.cellaserv.Message.Messa"
    "geType\022\017\n\007content\030\002 \001(\014\"O\n\013MessageType\022\014"
    "\n\010Register\020\000\022\013\n\007Request\020\001\022\t\n\005Reply\020\002\022\r\n\t"
    "Subscribe\020\003\022\013\n\007Publish\020\004\"0\n\010Register\022\014\n\004"
    "name\030\001 \001(\t\022\026\n\016identification\030\002 \001(\t\"i\n\007Re"
    "quest\022\024\n\014service_name\030\001 \001(\t\022\036\n\026service_i"
    "dentification\030\002 \001(\t\022\016\n\006method\030\003 \001(\t\022\014\n\004d"
    "ata\030\004 \001(\014\022\n\n\002id\030c \001(\006\"\213\002\n\005Reply\022\014\n\004data\030"
    "\001 \001(\014\022%\n\005error\030\002 \001(\0132\026.cellaserv.Reply.E"
    "rror\022\n\n\002id\030c \001(\006\032\300\001\n\005Error\022)\n\004type\030\001 \001(\016"
    "2\033.cellaserv.Reply.Error.Type\022\014\n\004what\030\002 "
    "\001(\t\"~\n\004Type\022\013\n\007NoError\020\000\022\021\n\rNoSuchServic"
    "e\020\001\022\031\n\025InvalidIdentification\020\002\022\020\n\014NoSuch"
    "Method\020\003\022\020\n\014BadArguments\020\004\022\013\n\007Timeout\020\005\022"
    "\n\n\006Custom\020~\"\032\n\tSubscribe\022\r\n\005event\030\001 \001(\t\""
    "&\n\007Publish\022\r\n\005event\030\001 \001(\t\022\014\n\004data\030\002 \001(\014b"
    "\006proto3", 687);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cellaserv.proto", &protobuf_RegisterTypes);
  Message::default_instance_ = new Message();
  Register::default_instance_ = new Register();
  Request::default_instance_ = new Request();
  Reply::default_instance_ = new Reply();
  Reply_Error::default_instance_ = new Reply_Error();
  Subscribe::default_instance_ = new Subscribe();
  Publish::default_instance_ = new Publish();
  Message::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  Request::default_instance_->InitAsDefaultInstance();
  Reply::default_instance_->InitAsDefaultInstance();
  Reply_Error::default_instance_->InitAsDefaultInstance();
  Subscribe::default_instance_->InitAsDefaultInstance();
  Publish::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cellaserv_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cellaserv_2eproto {
  StaticDescriptorInitializer_cellaserv_2eproto() {
    protobuf_AddDesc_cellaserv_2eproto();
  }
} static_descriptor_initializer_cellaserv_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_MessageType_descriptor_;
}
bool Message_MessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Message_MessageType Message::Register;
const Message_MessageType Message::Request;
const Message_MessageType Message::Reply;
const Message_MessageType Message::Subscribe;
const Message_MessageType Message::Publish;
const Message_MessageType Message::MessageType_MIN;
const Message_MessageType Message::MessageType_MAX;
const int Message::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kTypeFieldNumber;
const int Message::kContentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cellaserv.Message)
}

void Message::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Message::Message(const Message& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cellaserv.Message)
}

void Message::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:cellaserv.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cellaserv_2eproto();
  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:cellaserv.Message)
  type_ = 0;
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cellaserv.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cellaserv.Message.MessageType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cellaserv::Message_MessageType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cellaserv.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cellaserv.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cellaserv.Message)
  // optional .cellaserv.Message.MessageType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes content = 2;
  if (this->content().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // @@protoc_insertion_point(serialize_end:cellaserv.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cellaserv.Message)
  // optional .cellaserv.Message.MessageType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional bytes content = 2;
  if (this->content().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cellaserv.Message)
  return target;
}

int Message::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cellaserv.Message)
  int total_size = 0;

  // optional .cellaserv.Message.MessageType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional bytes content = 2;
  if (this->content().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cellaserv.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Message* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cellaserv.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cellaserv.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cellaserv.Message)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.content().size() > 0) {

    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cellaserv.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cellaserv.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {

  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  std::swap(type_, other->type_);
  content_.Swap(&other->content_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// optional .cellaserv.Message.MessageType type = 1;
void Message::clear_type() {
  type_ = 0;
}
 ::cellaserv::Message_MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.type)
  return static_cast< ::cellaserv::Message_MessageType >(type_);
}
 void Message::set_type(::cellaserv::Message_MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Message.type)
}

// optional bytes content = 2;
void Message::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.content)
  return content_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Message.content)
}
 void Message::set_content(const char* value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Message.content)
}
 void Message::set_content(const void* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Message.content)
}
 ::std::string* Message::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Message.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:cellaserv.Message.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Message::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Message.content)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Register::kNameFieldNumber;
const int Register::kIdentificationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Register::Register()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cellaserv.Register)
}

void Register::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Register::Register(const Register& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cellaserv.Register)
}

void Register::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Register::~Register() {
  // @@protoc_insertion_point(destructor:cellaserv.Register)
  SharedDtor();
}

void Register::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identification_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cellaserv_2eproto();
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New(::google::protobuf::Arena* arena) const {
  Register* n = new Register;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Register::Clear() {
// @@protoc_insertion_point(message_clear_start:cellaserv.Register)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cellaserv.Register)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Register.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_identification;
        break;
      }

      // optional string identification = 2;
      case 2: {
        if (tag == 18) {
         parse_identification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identification()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identification().data(), this->identification().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Register.identification"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cellaserv.Register)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cellaserv.Register)
  return false;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cellaserv.Register)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Register.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string identification = 2;
  if (this->identification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identification().data(), this->identification().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Register.identification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->identification(), output);
  }

  // @@protoc_insertion_point(serialize_end:cellaserv.Register)
}

::google::protobuf::uint8* Register::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cellaserv.Register)
  // optional string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Register.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string identification = 2;
  if (this->identification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identification().data(), this->identification().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Register.identification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->identification(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cellaserv.Register)
  return target;
}

int Register::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cellaserv.Register)
  int total_size = 0;

  // optional string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string identification = 2;
  if (this->identification().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identification());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cellaserv.Register)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Register* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Register>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cellaserv.Register)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cellaserv.Register)
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cellaserv.Register)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.identification().size() > 0) {

    identification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identification_);
  }
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cellaserv.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cellaserv.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {

  return true;
}

void Register::Swap(Register* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Register::InternalSwap(Register* other) {
  name_.Swap(&other->name_);
  identification_.Swap(&other->identification_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Register

// optional string name = 1;
void Register::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Register::name() const {
  // @@protoc_insertion_point(field_get:cellaserv.Register.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Register.name)
}
 void Register::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Register.name)
}
 void Register::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Register.name)
}
 ::std::string* Register::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Register.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Register::release_name() {
  // @@protoc_insertion_point(field_release:cellaserv.Register.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Register.name)
}

// optional string identification = 2;
void Register::clear_identification() {
  identification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Register::identification() const {
  // @@protoc_insertion_point(field_get:cellaserv.Register.identification)
  return identification_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_identification(const ::std::string& value) {
  
  identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Register.identification)
}
 void Register::set_identification(const char* value) {
  
  identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Register.identification)
}
 void Register::set_identification(const char* value, size_t size) {
  
  identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Register.identification)
}
 ::std::string* Register::mutable_identification() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Register.identification)
  return identification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Register::release_identification() {
  // @@protoc_insertion_point(field_release:cellaserv.Register.identification)
  
  return identification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Register::set_allocated_identification(::std::string* identification) {
  if (identification != NULL) {
    
  } else {
    
  }
  identification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identification);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Register.identification)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kServiceNameFieldNumber;
const int Request::kServiceIdentificationFieldNumber;
const int Request::kMethodFieldNumber;
const int Request::kDataFieldNumber;
const int Request::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cellaserv.Request)
}

void Request::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cellaserv.Request)
}

void Request::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  service_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_identification_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:cellaserv.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  service_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_identification_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cellaserv_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:cellaserv.Request)
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_identification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_ULONGLONG(0);
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cellaserv.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string service_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_name().data(), this->service_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Request.service_name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_service_identification;
        break;
      }

      // optional string service_identification = 2;
      case 2: {
        if (tag == 18) {
         parse_service_identification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service_identification()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->service_identification().data(), this->service_identification().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Request.service_identification"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_method;
        break;
      }

      // optional string method = 3;
      case 3: {
        if (tag == 26) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Request.method"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(793)) goto parse_id;
        break;
      }

      // optional fixed64 id = 99;
      case 99: {
        if (tag == 793) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cellaserv.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cellaserv.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cellaserv.Request)
  // optional string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Request.service_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->service_name(), output);
  }

  // optional string service_identification = 2;
  if (this->service_identification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_identification().data(), this->service_identification().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Request.service_identification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->service_identification(), output);
  }

  // optional string method = 3;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Request.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->method(), output);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional fixed64 id = 99;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cellaserv.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cellaserv.Request)
  // optional string service_name = 1;
  if (this->service_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_name().data(), this->service_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Request.service_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service_name(), target);
  }

  // optional string service_identification = 2;
  if (this->service_identification().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->service_identification().data(), this->service_identification().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Request.service_identification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->service_identification(), target);
  }

  // optional string method = 3;
  if (this->method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Request.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->method(), target);
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional fixed64 id = 99;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cellaserv.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cellaserv.Request)
  int total_size = 0;

  // optional string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_name());
  }

  // optional string service_identification = 2;
  if (this->service_identification().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->service_identification());
  }

  // optional string method = 3;
  if (this->method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  // optional bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional fixed64 id = 99;
  if (this->id() != 0) {
    total_size += 2 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cellaserv.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cellaserv.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cellaserv.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cellaserv.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.service_identification().size() > 0) {

    service_identification_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.service_identification_);
  }
  if (from.method().size() > 0) {

    method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cellaserv.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cellaserv.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  service_name_.Swap(&other->service_name_);
  service_identification_.Swap(&other->service_identification_);
  method_.Swap(&other->method_);
  data_.Swap(&other->data_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional string service_name = 1;
void Request::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::service_name() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.service_name)
  return service_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_service_name(const ::std::string& value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.service_name)
}
 void Request::set_service_name(const char* value) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.service_name)
}
 void Request::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.service_name)
}
 ::std::string* Request::mutable_service_name() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_service_name() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.service_name)
  
  return service_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.service_name)
}

// optional string service_identification = 2;
void Request::clear_service_identification() {
  service_identification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::service_identification() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.service_identification)
  return service_identification_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_service_identification(const ::std::string& value) {
  
  service_identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.service_identification)
}
 void Request::set_service_identification(const char* value) {
  
  service_identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.service_identification)
}
 void Request::set_service_identification(const char* value, size_t size) {
  
  service_identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.service_identification)
}
 ::std::string* Request::mutable_service_identification() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.service_identification)
  return service_identification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_service_identification() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.service_identification)
  
  return service_identification_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_service_identification(::std::string* service_identification) {
  if (service_identification != NULL) {
    
  } else {
    
  }
  service_identification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_identification);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.service_identification)
}

// optional string method = 3;
void Request::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_method(const ::std::string& value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.method)
}
 void Request::set_method(const char* value) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.method)
}
 void Request::set_method(const char* value, size_t size) {
  
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.method)
}
 ::std::string* Request::mutable_method() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.method)
  
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    
  } else {
    
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.method)
}

// optional bytes data = 4;
void Request::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.data)
}
 void Request::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.data)
}
 void Request::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.data)
}
 ::std::string* Request::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Request::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.data)
}

// optional fixed64 id = 99;
void Request::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Request::id() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.id)
  return id_;
}
 void Request::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Request.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Reply_Error_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_Error_Type_descriptor_;
}
bool Reply_Error_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 126:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Reply_Error_Type Reply_Error::NoError;
const Reply_Error_Type Reply_Error::NoSuchService;
const Reply_Error_Type Reply_Error::InvalidIdentification;
const Reply_Error_Type Reply_Error::NoSuchMethod;
const Reply_Error_Type Reply_Error::BadArguments;
const Reply_Error_Type Reply_Error::Timeout;
const Reply_Error_Type Reply_Error::Custom;
const Reply_Error_Type Reply_Error::Type_MIN;
const Reply_Error_Type Reply_Error::Type_MAX;
const int Reply_Error::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply_Error::kTypeFieldNumber;
const int Reply_Error::kWhatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply_Error::Reply_Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cellaserv.Reply.Error)
}

void Reply_Error::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Reply_Error::Reply_Error(const Reply_Error& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cellaserv.Reply.Error)
}

void Reply_Error::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 0;
  what_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Reply_Error::~Reply_Error() {
  // @@protoc_insertion_point(destructor:cellaserv.Reply.Error)
  SharedDtor();
}

void Reply_Error::SharedDtor() {
  what_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Reply_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_Error_descriptor_;
}

const Reply_Error& Reply_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cellaserv_2eproto();
  return *default_instance_;
}

Reply_Error* Reply_Error::default_instance_ = NULL;

Reply_Error* Reply_Error::New(::google::protobuf::Arena* arena) const {
  Reply_Error* n = new Reply_Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reply_Error::Clear() {
// @@protoc_insertion_point(message_clear_start:cellaserv.Reply.Error)
  type_ = 0;
  what_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Reply_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cellaserv.Reply.Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .cellaserv.Reply.Error.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::cellaserv::Reply_Error_Type >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_what;
        break;
      }

      // optional string what = 2;
      case 2: {
        if (tag == 18) {
         parse_what:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Reply.Error.what"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cellaserv.Reply.Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cellaserv.Reply.Error)
  return false;
#undef DO_
}

void Reply_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cellaserv.Reply.Error)
  // optional .cellaserv.Reply.Error.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string what = 2;
  if (this->what().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Reply.Error.what");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->what(), output);
  }

  // @@protoc_insertion_point(serialize_end:cellaserv.Reply.Error)
}

::google::protobuf::uint8* Reply_Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cellaserv.Reply.Error)
  // optional .cellaserv.Reply.Error.Type type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string what = 2;
  if (this->what().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Reply.Error.what");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->what(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cellaserv.Reply.Error)
  return target;
}

int Reply_Error::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cellaserv.Reply.Error)
  int total_size = 0;

  // optional .cellaserv.Reply.Error.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string what = 2;
  if (this->what().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->what());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply_Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cellaserv.Reply.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Reply_Error* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply_Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cellaserv.Reply.Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cellaserv.Reply.Error)
    MergeFrom(*source);
  }
}

void Reply_Error::MergeFrom(const Reply_Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cellaserv.Reply.Error)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.what().size() > 0) {

    what_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.what_);
  }
}

void Reply_Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cellaserv.Reply.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply_Error::CopyFrom(const Reply_Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cellaserv.Reply.Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply_Error::IsInitialized() const {

  return true;
}

void Reply_Error::Swap(Reply_Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply_Error::InternalSwap(Reply_Error* other) {
  std::swap(type_, other->type_);
  what_.Swap(&other->what_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reply_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_Error_descriptor_;
  metadata.reflection = Reply_Error_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Reply::kDataFieldNumber;
const int Reply::kErrorFieldNumber;
const int Reply::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Reply::Reply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cellaserv.Reply)
}

void Reply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  error_ = const_cast< ::cellaserv::Reply_Error*>(&::cellaserv::Reply_Error::default_instance());
}

Reply::Reply(const Reply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cellaserv.Reply)
}

void Reply::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
}

Reply::~Reply() {
  // @@protoc_insertion_point(destructor:cellaserv.Reply)
  SharedDtor();
}

void Reply::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete error_;
  }
}

void Reply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Reply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Reply_descriptor_;
}

const Reply& Reply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cellaserv_2eproto();
  return *default_instance_;
}

Reply* Reply::default_instance_ = NULL;

Reply* Reply::New(::google::protobuf::Arena* arena) const {
  Reply* n = new Reply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Reply::Clear() {
// @@protoc_insertion_point(message_clear_start:cellaserv.Reply)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
  id_ = GOOGLE_ULONGLONG(0);
}

bool Reply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cellaserv.Reply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .cellaserv.Reply.Error error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(793)) goto parse_id;
        break;
      }

      // optional fixed64 id = 99;
      case 99: {
        if (tag == 793) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cellaserv.Reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cellaserv.Reply)
  return false;
#undef DO_
}

void Reply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cellaserv.Reply)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // optional .cellaserv.Reply.Error error = 2;
  if (this->has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->error_, output);
  }

  // optional fixed64 id = 99;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(99, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:cellaserv.Reply)
}

::google::protobuf::uint8* Reply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cellaserv.Reply)
  // optional bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // optional .cellaserv.Reply.Error error = 2;
  if (this->has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->error_, false, target);
  }

  // optional fixed64 id = 99;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(99, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cellaserv.Reply)
  return target;
}

int Reply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cellaserv.Reply)
  int total_size = 0;

  // optional bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // optional .cellaserv.Reply.Error error = 2;
  if (this->has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->error_);
  }

  // optional fixed64 id = 99;
  if (this->id() != 0) {
    total_size += 2 + 8;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Reply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cellaserv.Reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Reply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Reply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cellaserv.Reply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cellaserv.Reply)
    MergeFrom(*source);
  }
}

void Reply::MergeFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cellaserv.Reply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_error()) {
    mutable_error()->::cellaserv::Reply_Error::MergeFrom(from.error());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Reply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cellaserv.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reply::CopyFrom(const Reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cellaserv.Reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reply::IsInitialized() const {

  return true;
}

void Reply::Swap(Reply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Reply::InternalSwap(Reply* other) {
  data_.Swap(&other->data_);
  std::swap(error_, other->error_);
  std::swap(id_, other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Reply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Reply_descriptor_;
  metadata.reflection = Reply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Reply_Error

// optional .cellaserv.Reply.Error.Type type = 1;
void Reply_Error::clear_type() {
  type_ = 0;
}
 ::cellaserv::Reply_Error_Type Reply_Error::type() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.Error.type)
  return static_cast< ::cellaserv::Reply_Error_Type >(type_);
}
 void Reply_Error::set_type(::cellaserv::Reply_Error_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Reply.Error.type)
}

// optional string what = 2;
void Reply_Error::clear_what() {
  what_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Reply_Error::what() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.Error.what)
  return what_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply_Error::set_what(const ::std::string& value) {
  
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.Error.what)
}
 void Reply_Error::set_what(const char* value) {
  
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Reply.Error.what)
}
 void Reply_Error::set_what(const char* value, size_t size) {
  
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Reply.Error.what)
}
 ::std::string* Reply_Error::mutable_what() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.Error.what)
  return what_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reply_Error::release_what() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.Error.what)
  
  return what_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply_Error::set_allocated_what(::std::string* what) {
  if (what != NULL) {
    
  } else {
    
  }
  what_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), what);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.Error.what)
}

// -------------------------------------------------------------------

// Reply

// optional bytes data = 1;
void Reply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Reply::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.data)
}
 void Reply::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Reply.data)
}
 void Reply::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Reply.data)
}
 ::std::string* Reply::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Reply::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Reply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.data)
}

// optional .cellaserv.Reply.Error error = 2;
bool Reply::has_error() const {
  return !_is_default_instance_ && error_ != NULL;
}
void Reply::clear_error() {
  if (GetArenaNoVirtual() == NULL && error_ != NULL) delete error_;
  error_ = NULL;
}
const ::cellaserv::Reply_Error& Reply::error() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
::cellaserv::Reply_Error* Reply::mutable_error() {
  
  if (error_ == NULL) {
    error_ = new ::cellaserv::Reply_Error;
  }
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.error)
  return error_;
}
::cellaserv::Reply_Error* Reply::release_error() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.error)
  
  ::cellaserv::Reply_Error* temp = error_;
  error_ = NULL;
  return temp;
}
void Reply::set_allocated_error(::cellaserv::Reply_Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.error)
}

// optional fixed64 id = 99;
void Reply::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 Reply::id() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.id)
  return id_;
}
 void Reply::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Reply.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subscribe::kEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subscribe::Subscribe()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cellaserv.Subscribe)
}

void Subscribe::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Subscribe::Subscribe(const Subscribe& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cellaserv.Subscribe)
}

void Subscribe::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Subscribe::~Subscribe() {
  // @@protoc_insertion_point(destructor:cellaserv.Subscribe)
  SharedDtor();
}

void Subscribe::SharedDtor() {
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Subscribe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscribe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Subscribe_descriptor_;
}

const Subscribe& Subscribe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cellaserv_2eproto();
  return *default_instance_;
}

Subscribe* Subscribe::default_instance_ = NULL;

Subscribe* Subscribe::New(::google::protobuf::Arena* arena) const {
  Subscribe* n = new Subscribe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:cellaserv.Subscribe)
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Subscribe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cellaserv.Subscribe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event().data(), this->event().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Subscribe.event"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cellaserv.Subscribe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cellaserv.Subscribe)
  return false;
#undef DO_
}

void Subscribe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cellaserv.Subscribe)
  // optional string event = 1;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Subscribe.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event(), output);
  }

  // @@protoc_insertion_point(serialize_end:cellaserv.Subscribe)
}

::google::protobuf::uint8* Subscribe::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cellaserv.Subscribe)
  // optional string event = 1;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Subscribe.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cellaserv.Subscribe)
  return target;
}

int Subscribe::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cellaserv.Subscribe)
  int total_size = 0;

  // optional string event = 1;
  if (this->event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscribe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cellaserv.Subscribe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Subscribe* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Subscribe>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cellaserv.Subscribe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cellaserv.Subscribe)
    MergeFrom(*source);
  }
}

void Subscribe::MergeFrom(const Subscribe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cellaserv.Subscribe)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.event().size() > 0) {

    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
}

void Subscribe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cellaserv.Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscribe::CopyFrom(const Subscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cellaserv.Subscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscribe::IsInitialized() const {

  return true;
}

void Subscribe::Swap(Subscribe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subscribe::InternalSwap(Subscribe* other) {
  event_.Swap(&other->event_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subscribe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Subscribe_descriptor_;
  metadata.reflection = Subscribe_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subscribe

// optional string event = 1;
void Subscribe::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Subscribe::event() const {
  // @@protoc_insertion_point(field_get:cellaserv.Subscribe.event)
  return event_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Subscribe::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Subscribe.event)
}
 void Subscribe::set_event(const char* value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Subscribe.event)
}
 void Subscribe::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Subscribe.event)
}
 ::std::string* Subscribe::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Subscribe.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Subscribe::release_event() {
  // @@protoc_insertion_point(field_release:cellaserv.Subscribe.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Subscribe::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Subscribe.event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Publish::kEventFieldNumber;
const int Publish::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Publish::Publish()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cellaserv.Publish)
}

void Publish::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Publish::Publish(const Publish& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cellaserv.Publish)
}

void Publish::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  event_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Publish::~Publish() {
  // @@protoc_insertion_point(destructor:cellaserv.Publish)
  SharedDtor();
}

void Publish::SharedDtor() {
  event_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Publish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Publish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Publish_descriptor_;
}

const Publish& Publish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cellaserv_2eproto();
  return *default_instance_;
}

Publish* Publish::default_instance_ = NULL;

Publish* Publish::New(::google::protobuf::Arena* arena) const {
  Publish* n = new Publish;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Publish::Clear() {
// @@protoc_insertion_point(message_clear_start:cellaserv.Publish)
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Publish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cellaserv.Publish)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->event().data(), this->event().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "cellaserv.Publish.event"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cellaserv.Publish)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cellaserv.Publish)
  return false;
#undef DO_
}

void Publish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cellaserv.Publish)
  // optional string event = 1;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Publish.event");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event(), output);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:cellaserv.Publish)
}

::google::protobuf::uint8* Publish::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cellaserv.Publish)
  // optional string event = 1;
  if (this->event().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->event().data(), this->event().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "cellaserv.Publish.event");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event(), target);
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:cellaserv.Publish)
  return target;
}

int Publish::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:cellaserv.Publish)
  int total_size = 0;

  // optional string event = 1;
  if (this->event().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->event());
  }

  // optional bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Publish::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cellaserv.Publish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Publish* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Publish>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cellaserv.Publish)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cellaserv.Publish)
    MergeFrom(*source);
  }
}

void Publish::MergeFrom(const Publish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cellaserv.Publish)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.event().size() > 0) {

    event_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void Publish::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cellaserv.Publish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Publish::CopyFrom(const Publish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cellaserv.Publish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publish::IsInitialized() const {

  return true;
}

void Publish::Swap(Publish* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Publish::InternalSwap(Publish* other) {
  event_.Swap(&other->event_);
  data_.Swap(&other->data_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Publish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Publish_descriptor_;
  metadata.reflection = Publish_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Publish

// optional string event = 1;
void Publish::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Publish::event() const {
  // @@protoc_insertion_point(field_get:cellaserv.Publish.event)
  return event_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publish::set_event(const ::std::string& value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Publish.event)
}
 void Publish::set_event(const char* value) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Publish.event)
}
 void Publish::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Publish.event)
}
 ::std::string* Publish::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Publish.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Publish::release_event() {
  // @@protoc_insertion_point(field_release:cellaserv.Publish.event)
  
  return event_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publish::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Publish.event)
}

// optional bytes data = 2;
void Publish::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Publish::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Publish.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publish::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Publish.data)
}
 void Publish::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Publish.data)
}
 void Publish::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Publish.data)
}
 ::std::string* Publish::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:cellaserv.Publish.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Publish::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Publish.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Publish::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Publish.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace cellaserv

// @@protoc_insertion_point(global_scope)
