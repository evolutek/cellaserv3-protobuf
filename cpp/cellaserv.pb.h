// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cellaserv.proto

#ifndef PROTOBUF_cellaserv_2eproto__INCLUDED
#define PROTOBUF_cellaserv_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cellaserv {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_cellaserv_2eproto();
void protobuf_AssignDesc_cellaserv_2eproto();
void protobuf_ShutdownFile_cellaserv_2eproto();

class Message;
class Register;
class Request;
class Reply;
class Reply_Error;
class Subscribe;
class Publish;

enum Message_MessageType {
  Message_MessageType_Register = 0,
  Message_MessageType_Request = 1,
  Message_MessageType_Reply = 2,
  Message_MessageType_Subscribe = 3,
  Message_MessageType_Publish = 4
};
bool Message_MessageType_IsValid(int value);
const Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_Register;
const Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_Publish;
const int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor();
inline const ::std::string& Message_MessageType_Name(Message_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_MessageType_descriptor(), value);
}
inline bool Message_MessageType_Parse(
    const ::std::string& name, Message_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
enum Reply_Error_Type {
  Reply_Error_Type_NoSuchService = 0,
  Reply_Error_Type_InvalidIdentification = 1,
  Reply_Error_Type_NoSuchMethod = 2,
  Reply_Error_Type_BadArguments = 3,
  Reply_Error_Type_Timeout = 4,
  Reply_Error_Type_Custom = 126
};
bool Reply_Error_Type_IsValid(int value);
const Reply_Error_Type Reply_Error_Type_Type_MIN = Reply_Error_Type_NoSuchService;
const Reply_Error_Type Reply_Error_Type_Type_MAX = Reply_Error_Type_Custom;
const int Reply_Error_Type_Type_ARRAYSIZE = Reply_Error_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_Error_Type_descriptor();
inline const ::std::string& Reply_Error_Type_Name(Reply_Error_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_Error_Type_descriptor(), value);
}
inline bool Reply_Error_Type_Parse(
    const ::std::string& name, Reply_Error_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_Error_Type>(
    Reply_Error_Type_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_MessageType MessageType;
  static const MessageType Register = Message_MessageType_Register;
  static const MessageType Request = Message_MessageType_Request;
  static const MessageType Reply = Message_MessageType_Reply;
  static const MessageType Subscribe = Message_MessageType_Subscribe;
  static const MessageType Publish = Message_MessageType_Publish;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Message_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .cellaserv.Message.MessageType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::cellaserv::Message_MessageType type() const;
  inline void set_type(::cellaserv::Message_MessageType value);

  // required bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:cellaserv.Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cellaserv_2eproto();
  friend void protobuf_AssignDesc_cellaserv_2eproto();
  friend void protobuf_ShutdownFile_cellaserv_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Register : public ::google::protobuf::Message {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Register& default_instance();

  void Swap(Register* other);

  // implements Message ----------------------------------------------

  Register* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string identification = 2;
  inline bool has_identification() const;
  inline void clear_identification();
  static const int kIdentificationFieldNumber = 2;
  inline const ::std::string& identification() const;
  inline void set_identification(const ::std::string& value);
  inline void set_identification(const char* value);
  inline void set_identification(const char* value, size_t size);
  inline ::std::string* mutable_identification();
  inline ::std::string* release_identification();
  inline void set_allocated_identification(::std::string* identification);

  // @@protoc_insertion_point(class_scope:cellaserv.Register)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_identification();
  inline void clear_has_identification();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* identification_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cellaserv_2eproto();
  friend void protobuf_AssignDesc_cellaserv_2eproto();
  friend void protobuf_ShutdownFile_cellaserv_2eproto();

  void InitAsDefaultInstance();
  static Register* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string service_name = 1;
  inline bool has_service_name() const;
  inline void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  inline const ::std::string& service_name() const;
  inline void set_service_name(const ::std::string& value);
  inline void set_service_name(const char* value);
  inline void set_service_name(const char* value, size_t size);
  inline ::std::string* mutable_service_name();
  inline ::std::string* release_service_name();
  inline void set_allocated_service_name(::std::string* service_name);

  // optional string service_identification = 2;
  inline bool has_service_identification() const;
  inline void clear_service_identification();
  static const int kServiceIdentificationFieldNumber = 2;
  inline const ::std::string& service_identification() const;
  inline void set_service_identification(const ::std::string& value);
  inline void set_service_identification(const char* value);
  inline void set_service_identification(const char* value, size_t size);
  inline ::std::string* mutable_service_identification();
  inline ::std::string* release_service_identification();
  inline void set_allocated_service_identification(::std::string* service_identification);

  // required string method = 3;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 3;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  inline void set_allocated_method(::std::string* method);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // required uint64 id = 99;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 99;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cellaserv.Request)
 private:
  inline void set_has_service_name();
  inline void clear_has_service_name();
  inline void set_has_service_identification();
  inline void clear_has_service_identification();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* service_name_;
  ::std::string* service_identification_;
  ::std::string* method_;
  ::std::string* data_;
  ::google::protobuf::uint64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_cellaserv_2eproto();
  friend void protobuf_AssignDesc_cellaserv_2eproto();
  friend void protobuf_ShutdownFile_cellaserv_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Reply_Error : public ::google::protobuf::Message {
 public:
  Reply_Error();
  virtual ~Reply_Error();

  Reply_Error(const Reply_Error& from);

  inline Reply_Error& operator=(const Reply_Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_Error& default_instance();

  void Swap(Reply_Error* other);

  // implements Message ----------------------------------------------

  Reply_Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply_Error& from);
  void MergeFrom(const Reply_Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reply_Error_Type Type;
  static const Type NoSuchService = Reply_Error_Type_NoSuchService;
  static const Type InvalidIdentification = Reply_Error_Type_InvalidIdentification;
  static const Type NoSuchMethod = Reply_Error_Type_NoSuchMethod;
  static const Type BadArguments = Reply_Error_Type_BadArguments;
  static const Type Timeout = Reply_Error_Type_Timeout;
  static const Type Custom = Reply_Error_Type_Custom;
  static inline bool Type_IsValid(int value) {
    return Reply_Error_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Reply_Error_Type_Type_MIN;
  static const Type Type_MAX =
    Reply_Error_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Reply_Error_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Reply_Error_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Reply_Error_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Reply_Error_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .cellaserv.Reply.Error.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::cellaserv::Reply_Error_Type type() const;
  inline void set_type(::cellaserv::Reply_Error_Type value);

  // optional string what = 2;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 2;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:cellaserv.Reply.Error)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* what_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cellaserv_2eproto();
  friend void protobuf_AssignDesc_cellaserv_2eproto();
  friend void protobuf_ShutdownFile_cellaserv_2eproto();

  void InitAsDefaultInstance();
  static Reply_Error* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Reply_Error Error;

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional .cellaserv.Reply.Error error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::cellaserv::Reply_Error& error() const;
  inline ::cellaserv::Reply_Error* mutable_error();
  inline ::cellaserv::Reply_Error* release_error();
  inline void set_allocated_error(::cellaserv::Reply_Error* error);

  // required uint64 id = 99;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 99;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cellaserv.Reply)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::cellaserv::Reply_Error* error_;
  ::google::protobuf::uint64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_cellaserv_2eproto();
  friend void protobuf_AssignDesc_cellaserv_2eproto();
  friend void protobuf_ShutdownFile_cellaserv_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// -------------------------------------------------------------------

class Subscribe : public ::google::protobuf::Message {
 public:
  Subscribe();
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscribe& default_instance();

  void Swap(Subscribe* other);

  // implements Message ----------------------------------------------

  Subscribe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  inline ::std::string* release_event();
  inline void set_allocated_event(::std::string* event);

  // @@protoc_insertion_point(class_scope:cellaserv.Subscribe)
 private:
  inline void set_has_event();
  inline void clear_has_event();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* event_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_cellaserv_2eproto();
  friend void protobuf_AssignDesc_cellaserv_2eproto();
  friend void protobuf_ShutdownFile_cellaserv_2eproto();

  void InitAsDefaultInstance();
  static Subscribe* default_instance_;
};
// -------------------------------------------------------------------

class Publish : public ::google::protobuf::Message {
 public:
  Publish();
  virtual ~Publish();

  Publish(const Publish& from);

  inline Publish& operator=(const Publish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Publish& default_instance();

  void Swap(Publish* other);

  // implements Message ----------------------------------------------

  Publish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Publish& from);
  void MergeFrom(const Publish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string event = 1;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 1;
  inline const ::std::string& event() const;
  inline void set_event(const ::std::string& value);
  inline void set_event(const char* value);
  inline void set_event(const char* value, size_t size);
  inline ::std::string* mutable_event();
  inline ::std::string* release_event();
  inline void set_allocated_event(::std::string* event);

  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:cellaserv.Publish)
 private:
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* event_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_cellaserv_2eproto();
  friend void protobuf_AssignDesc_cellaserv_2eproto();
  friend void protobuf_ShutdownFile_cellaserv_2eproto();

  void InitAsDefaultInstance();
  static Publish* default_instance_;
};
// ===================================================================


// ===================================================================

// Message

// required .cellaserv.Message.MessageType type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cellaserv::Message_MessageType Message::type() const {
  return static_cast< ::cellaserv::Message_MessageType >(type_);
}
inline void Message::set_type(::cellaserv::Message_MessageType value) {
  assert(::cellaserv::Message_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required bytes content = 2;
inline bool Message::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Message::content() const {
  return *content_;
}
inline void Message::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Message::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Message::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Message::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Message::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Register

// required string name = 1;
inline bool Register::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Register::name() const {
  return *name_;
}
inline void Register::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Register::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Register::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Register::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string identification = 2;
inline bool Register::has_identification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_identification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_identification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_identification() {
  if (identification_ != &::google::protobuf::internal::kEmptyString) {
    identification_->clear();
  }
  clear_has_identification();
}
inline const ::std::string& Register::identification() const {
  return *identification_;
}
inline void Register::set_identification(const ::std::string& value) {
  set_has_identification();
  if (identification_ == &::google::protobuf::internal::kEmptyString) {
    identification_ = new ::std::string;
  }
  identification_->assign(value);
}
inline void Register::set_identification(const char* value) {
  set_has_identification();
  if (identification_ == &::google::protobuf::internal::kEmptyString) {
    identification_ = new ::std::string;
  }
  identification_->assign(value);
}
inline void Register::set_identification(const char* value, size_t size) {
  set_has_identification();
  if (identification_ == &::google::protobuf::internal::kEmptyString) {
    identification_ = new ::std::string;
  }
  identification_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Register::mutable_identification() {
  set_has_identification();
  if (identification_ == &::google::protobuf::internal::kEmptyString) {
    identification_ = new ::std::string;
  }
  return identification_;
}
inline ::std::string* Register::release_identification() {
  clear_has_identification();
  if (identification_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = identification_;
    identification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Register::set_allocated_identification(::std::string* identification) {
  if (identification_ != &::google::protobuf::internal::kEmptyString) {
    delete identification_;
  }
  if (identification) {
    set_has_identification();
    identification_ = identification;
  } else {
    clear_has_identification();
    identification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Request

// required string service_name = 1;
inline bool Request::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_service_name() {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    service_name_->clear();
  }
  clear_has_service_name();
}
inline const ::std::string& Request::service_name() const {
  return *service_name_;
}
inline void Request::set_service_name(const ::std::string& value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void Request::set_service_name(const char* value) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(value);
}
inline void Request::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  service_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_service_name() {
  set_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    service_name_ = new ::std::string;
  }
  return service_name_;
}
inline ::std::string* Request::release_service_name() {
  clear_has_service_name();
  if (service_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_name_;
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_service_name(::std::string* service_name) {
  if (service_name_ != &::google::protobuf::internal::kEmptyString) {
    delete service_name_;
  }
  if (service_name) {
    set_has_service_name();
    service_name_ = service_name;
  } else {
    clear_has_service_name();
    service_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string service_identification = 2;
inline bool Request::has_service_identification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_service_identification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_service_identification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_service_identification() {
  if (service_identification_ != &::google::protobuf::internal::kEmptyString) {
    service_identification_->clear();
  }
  clear_has_service_identification();
}
inline const ::std::string& Request::service_identification() const {
  return *service_identification_;
}
inline void Request::set_service_identification(const ::std::string& value) {
  set_has_service_identification();
  if (service_identification_ == &::google::protobuf::internal::kEmptyString) {
    service_identification_ = new ::std::string;
  }
  service_identification_->assign(value);
}
inline void Request::set_service_identification(const char* value) {
  set_has_service_identification();
  if (service_identification_ == &::google::protobuf::internal::kEmptyString) {
    service_identification_ = new ::std::string;
  }
  service_identification_->assign(value);
}
inline void Request::set_service_identification(const char* value, size_t size) {
  set_has_service_identification();
  if (service_identification_ == &::google::protobuf::internal::kEmptyString) {
    service_identification_ = new ::std::string;
  }
  service_identification_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_service_identification() {
  set_has_service_identification();
  if (service_identification_ == &::google::protobuf::internal::kEmptyString) {
    service_identification_ = new ::std::string;
  }
  return service_identification_;
}
inline ::std::string* Request::release_service_identification() {
  clear_has_service_identification();
  if (service_identification_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_identification_;
    service_identification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_service_identification(::std::string* service_identification) {
  if (service_identification_ != &::google::protobuf::internal::kEmptyString) {
    delete service_identification_;
  }
  if (service_identification) {
    set_has_service_identification();
    service_identification_ = service_identification;
  } else {
    clear_has_service_identification();
    service_identification_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string method = 3;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& Request::method() const {
  return *method_;
}
inline void Request::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void Request::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* Request::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (method) {
    set_has_method();
    method_ = method;
  } else {
    clear_has_method();
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes data = 4;
inline bool Request::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Request::data() const {
  return *data_;
}
inline void Request::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Request::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Request::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Request::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Request::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 id = 99;
inline bool Request::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Request::id() const {
  return id_;
}
inline void Request::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Reply_Error

// required .cellaserv.Reply.Error.Type type = 1;
inline bool Reply_Error::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_Error::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_Error::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_Error::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cellaserv::Reply_Error_Type Reply_Error::type() const {
  return static_cast< ::cellaserv::Reply_Error_Type >(type_);
}
inline void Reply_Error::set_type(::cellaserv::Reply_Error_Type value) {
  assert(::cellaserv::Reply_Error_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string what = 2;
inline bool Reply_Error::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply_Error::set_has_what() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply_Error::clear_has_what() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply_Error::clear_what() {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& Reply_Error::what() const {
  return *what_;
}
inline void Reply_Error::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Reply_Error::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(value);
}
inline void Reply_Error::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Reply_Error::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    what_ = new ::std::string;
  }
  return what_;
}
inline ::std::string* Reply_Error::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Reply_Error::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::kEmptyString) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Reply

// optional bytes data = 1;
inline bool Reply::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Reply::data() const {
  return *data_;
}
inline void Reply::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Reply::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Reply::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Reply::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Reply::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Reply::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .cellaserv.Reply.Error error = 2;
inline bool Reply::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply::clear_error() {
  if (error_ != NULL) error_->::cellaserv::Reply_Error::Clear();
  clear_has_error();
}
inline const ::cellaserv::Reply_Error& Reply::error() const {
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::cellaserv::Reply_Error* Reply::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::cellaserv::Reply_Error;
  return error_;
}
inline ::cellaserv::Reply_Error* Reply::release_error() {
  clear_has_error();
  ::cellaserv::Reply_Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Reply::set_allocated_error(::cellaserv::Reply_Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
}

// required uint64 id = 99;
inline bool Reply::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reply::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reply::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reply::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Reply::id() const {
  return id_;
}
inline void Reply::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Subscribe

// required string event = 1;
inline bool Subscribe::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscribe::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subscribe::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subscribe::clear_event() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    event_->clear();
  }
  clear_has_event();
}
inline const ::std::string& Subscribe::event() const {
  return *event_;
}
inline void Subscribe::set_event(const ::std::string& value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Subscribe::set_event(const char* value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Subscribe::set_event(const char* value, size_t size) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Subscribe::mutable_event() {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  return event_;
}
inline ::std::string* Subscribe::release_event() {
  clear_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_;
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Subscribe::set_allocated_event(::std::string* event) {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (event) {
    set_has_event();
    event_ = event;
  } else {
    clear_has_event();
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Publish

// required string event = 1;
inline bool Publish::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Publish::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Publish::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Publish::clear_event() {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    event_->clear();
  }
  clear_has_event();
}
inline const ::std::string& Publish::event() const {
  return *event_;
}
inline void Publish::set_event(const ::std::string& value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Publish::set_event(const char* value) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(value);
}
inline void Publish::set_event(const char* value, size_t size) {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  event_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Publish::mutable_event() {
  set_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    event_ = new ::std::string;
  }
  return event_;
}
inline ::std::string* Publish::release_event() {
  clear_has_event();
  if (event_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = event_;
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Publish::set_allocated_event(::std::string* event) {
  if (event_ != &::google::protobuf::internal::kEmptyString) {
    delete event_;
  }
  if (event) {
    set_has_event();
    event_ = event;
  } else {
    clear_has_event();
    event_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes data = 2;
inline bool Publish::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Publish::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Publish::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Publish::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Publish::data() const {
  return *data_;
}
inline void Publish::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Publish::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Publish::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Publish::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Publish::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Publish::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace cellaserv

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cellaserv::Message_MessageType>() {
  return ::cellaserv::Message_MessageType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cellaserv::Reply_Error_Type>() {
  return ::cellaserv::Reply_Error_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cellaserv_2eproto__INCLUDED
