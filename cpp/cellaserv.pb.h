// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cellaserv.proto

#ifndef PROTOBUF_INCLUDED_cellaserv_2eproto
#define PROTOBUF_INCLUDED_cellaserv_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cellaserv_2eproto 

namespace protobuf_cellaserv_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cellaserv_2eproto
namespace cellaserv {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Publish;
class PublishDefaultTypeInternal;
extern PublishDefaultTypeInternal _Publish_default_instance_;
class Register;
class RegisterDefaultTypeInternal;
extern RegisterDefaultTypeInternal _Register_default_instance_;
class Reply;
class ReplyDefaultTypeInternal;
extern ReplyDefaultTypeInternal _Reply_default_instance_;
class Reply_Error;
class Reply_ErrorDefaultTypeInternal;
extern Reply_ErrorDefaultTypeInternal _Reply_Error_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Subscribe;
class SubscribeDefaultTypeInternal;
extern SubscribeDefaultTypeInternal _Subscribe_default_instance_;
}  // namespace cellaserv
namespace google {
namespace protobuf {
template<> ::cellaserv::Message* Arena::CreateMaybeMessage<::cellaserv::Message>(Arena*);
template<> ::cellaserv::Publish* Arena::CreateMaybeMessage<::cellaserv::Publish>(Arena*);
template<> ::cellaserv::Register* Arena::CreateMaybeMessage<::cellaserv::Register>(Arena*);
template<> ::cellaserv::Reply* Arena::CreateMaybeMessage<::cellaserv::Reply>(Arena*);
template<> ::cellaserv::Reply_Error* Arena::CreateMaybeMessage<::cellaserv::Reply_Error>(Arena*);
template<> ::cellaserv::Request* Arena::CreateMaybeMessage<::cellaserv::Request>(Arena*);
template<> ::cellaserv::Subscribe* Arena::CreateMaybeMessage<::cellaserv::Subscribe>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace cellaserv {

enum Message_MessageType {
  Message_MessageType_Register = 0,
  Message_MessageType_Request = 1,
  Message_MessageType_Reply = 2,
  Message_MessageType_Subscribe = 3,
  Message_MessageType_Publish = 4
};
bool Message_MessageType_IsValid(int value);
const Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_Register;
const Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_Publish;
const int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_MessageType_descriptor();
inline const ::std::string& Message_MessageType_Name(Message_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_MessageType_descriptor(), value);
}
inline bool Message_MessageType_Parse(
    const ::std::string& name, Message_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
enum Reply_Error_Type {
  Reply_Error_Type_NoSuchService = 0,
  Reply_Error_Type_InvalidIdentification = 1,
  Reply_Error_Type_NoSuchMethod = 2,
  Reply_Error_Type_BadArguments = 3,
  Reply_Error_Type_Timeout = 4,
  Reply_Error_Type_Custom = 126
};
bool Reply_Error_Type_IsValid(int value);
const Reply_Error_Type Reply_Error_Type_Type_MIN = Reply_Error_Type_NoSuchService;
const Reply_Error_Type Reply_Error_Type_Type_MAX = Reply_Error_Type_Custom;
const int Reply_Error_Type_Type_ARRAYSIZE = Reply_Error_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Reply_Error_Type_descriptor();
inline const ::std::string& Reply_Error_Type_Name(Reply_Error_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Reply_Error_Type_descriptor(), value);
}
inline bool Reply_Error_Type_Parse(
    const ::std::string& name, Reply_Error_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Reply_Error_Type>(
    Reply_Error_Type_descriptor(), name, value);
}
// ===================================================================

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cellaserv.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Message_MessageType MessageType;
  static const MessageType Register =
    Message_MessageType_Register;
  static const MessageType Request =
    Message_MessageType_Request;
  static const MessageType Reply =
    Message_MessageType_Reply;
  static const MessageType Subscribe =
    Message_MessageType_Subscribe;
  static const MessageType Publish =
    Message_MessageType_Publish;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return Message_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required bytes content = 2;
  bool has_content() const;
  void clear_content();
  static const int kContentFieldNumber = 2;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const void* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // required .cellaserv.Message.MessageType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cellaserv::Message_MessageType type() const;
  void set_type(::cellaserv::Message_MessageType value);

  // @@protoc_insertion_point(class_scope:cellaserv.Message)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_content();
  void clear_has_content();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  int type_;
  friend struct ::protobuf_cellaserv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Register : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cellaserv.Register) */ {
 public:
  Register();
  virtual ~Register();

  Register(const Register& from);

  inline Register& operator=(const Register& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Register(Register&& from) noexcept
    : Register() {
    *this = ::std::move(from);
  }

  inline Register& operator=(Register&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Register& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Register* internal_default_instance() {
    return reinterpret_cast<const Register*>(
               &_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Register* other);
  friend void swap(Register& a, Register& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Register* New() const final {
    return CreateMaybeMessage<Register>(NULL);
  }

  Register* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Register>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Register& from);
  void MergeFrom(const Register& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Register* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string identification = 2;
  bool has_identification() const;
  void clear_identification();
  static const int kIdentificationFieldNumber = 2;
  const ::std::string& identification() const;
  void set_identification(const ::std::string& value);
  #if LANG_CXX11
  void set_identification(::std::string&& value);
  #endif
  void set_identification(const char* value);
  void set_identification(const char* value, size_t size);
  ::std::string* mutable_identification();
  ::std::string* release_identification();
  void set_allocated_identification(::std::string* identification);

  // @@protoc_insertion_point(class_scope:cellaserv.Register)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_identification();
  void clear_has_identification();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr identification_;
  friend struct ::protobuf_cellaserv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cellaserv.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(NULL);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string service_name = 1;
  bool has_service_name() const;
  void clear_service_name();
  static const int kServiceNameFieldNumber = 1;
  const ::std::string& service_name() const;
  void set_service_name(const ::std::string& value);
  #if LANG_CXX11
  void set_service_name(::std::string&& value);
  #endif
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  ::std::string* mutable_service_name();
  ::std::string* release_service_name();
  void set_allocated_service_name(::std::string* service_name);

  // optional string service_identification = 2;
  bool has_service_identification() const;
  void clear_service_identification();
  static const int kServiceIdentificationFieldNumber = 2;
  const ::std::string& service_identification() const;
  void set_service_identification(const ::std::string& value);
  #if LANG_CXX11
  void set_service_identification(::std::string&& value);
  #endif
  void set_service_identification(const char* value);
  void set_service_identification(const char* value, size_t size);
  ::std::string* mutable_service_identification();
  ::std::string* release_service_identification();
  void set_allocated_service_identification(::std::string* service_identification);

  // required string method = 3;
  bool has_method() const;
  void clear_method();
  static const int kMethodFieldNumber = 3;
  const ::std::string& method() const;
  void set_method(const ::std::string& value);
  #if LANG_CXX11
  void set_method(::std::string&& value);
  #endif
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  ::std::string* mutable_method();
  ::std::string* release_method();
  void set_allocated_method(::std::string* method);

  // optional bytes data = 4;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // required fixed64 id = 99;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 99;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cellaserv.Request)
 private:
  void set_has_service_name();
  void clear_has_service_name();
  void set_has_service_identification();
  void clear_has_service_identification();
  void set_has_method();
  void clear_has_method();
  void set_has_data();
  void clear_has_data();
  void set_has_id();
  void clear_has_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr service_name_;
  ::google::protobuf::internal::ArenaStringPtr service_identification_;
  ::google::protobuf::internal::ArenaStringPtr method_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint64 id_;
  friend struct ::protobuf_cellaserv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reply_Error : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cellaserv.Reply.Error) */ {
 public:
  Reply_Error();
  virtual ~Reply_Error();

  Reply_Error(const Reply_Error& from);

  inline Reply_Error& operator=(const Reply_Error& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply_Error(Reply_Error&& from) noexcept
    : Reply_Error() {
    *this = ::std::move(from);
  }

  inline Reply_Error& operator=(Reply_Error&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply_Error& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply_Error* internal_default_instance() {
    return reinterpret_cast<const Reply_Error*>(
               &_Reply_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Reply_Error* other);
  friend void swap(Reply_Error& a, Reply_Error& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply_Error* New() const final {
    return CreateMaybeMessage<Reply_Error>(NULL);
  }

  Reply_Error* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reply_Error>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reply_Error& from);
  void MergeFrom(const Reply_Error& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply_Error* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Reply_Error_Type Type;
  static const Type NoSuchService =
    Reply_Error_Type_NoSuchService;
  static const Type InvalidIdentification =
    Reply_Error_Type_InvalidIdentification;
  static const Type NoSuchMethod =
    Reply_Error_Type_NoSuchMethod;
  static const Type BadArguments =
    Reply_Error_Type_BadArguments;
  static const Type Timeout =
    Reply_Error_Type_Timeout;
  static const Type Custom =
    Reply_Error_Type_Custom;
  static inline bool Type_IsValid(int value) {
    return Reply_Error_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Reply_Error_Type_Type_MIN;
  static const Type Type_MAX =
    Reply_Error_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Reply_Error_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Reply_Error_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Reply_Error_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Reply_Error_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string what = 2;
  bool has_what() const;
  void clear_what();
  static const int kWhatFieldNumber = 2;
  const ::std::string& what() const;
  void set_what(const ::std::string& value);
  #if LANG_CXX11
  void set_what(::std::string&& value);
  #endif
  void set_what(const char* value);
  void set_what(const char* value, size_t size);
  ::std::string* mutable_what();
  ::std::string* release_what();
  void set_allocated_what(::std::string* what);

  // required .cellaserv.Reply.Error.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::cellaserv::Reply_Error_Type type() const;
  void set_type(::cellaserv::Reply_Error_Type value);

  // @@protoc_insertion_point(class_scope:cellaserv.Reply.Error)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_what();
  void clear_has_what();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr what_;
  int type_;
  friend struct ::protobuf_cellaserv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cellaserv.Reply) */ {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Reply(Reply&& from) noexcept
    : Reply() {
    *this = ::std::move(from);
  }

  inline Reply& operator=(Reply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Reply* internal_default_instance() {
    return reinterpret_cast<const Reply*>(
               &_Reply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Reply* other);
  friend void swap(Reply& a, Reply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Reply* New() const final {
    return CreateMaybeMessage<Reply>(NULL);
  }

  Reply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Reply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Reply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Reply_Error Error;

  // accessors -------------------------------------------------------

  // optional bytes data = 1;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional .cellaserv.Reply.Error error = 2;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 2;
  private:
  const ::cellaserv::Reply_Error& _internal_error() const;
  public:
  const ::cellaserv::Reply_Error& error() const;
  ::cellaserv::Reply_Error* release_error();
  ::cellaserv::Reply_Error* mutable_error();
  void set_allocated_error(::cellaserv::Reply_Error* error);

  // required fixed64 id = 99;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 99;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:cellaserv.Reply)
 private:
  void set_has_data();
  void clear_has_data();
  void set_has_error();
  void clear_has_error();
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::cellaserv::Reply_Error* error_;
  ::google::protobuf::uint64 id_;
  friend struct ::protobuf_cellaserv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Subscribe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cellaserv.Subscribe) */ {
 public:
  Subscribe();
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscribe(Subscribe&& from) noexcept
    : Subscribe() {
    *this = ::std::move(from);
  }

  inline Subscribe& operator=(Subscribe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscribe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscribe* internal_default_instance() {
    return reinterpret_cast<const Subscribe*>(
               &_Subscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Subscribe* other);
  friend void swap(Subscribe& a, Subscribe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscribe* New() const final {
    return CreateMaybeMessage<Subscribe>(NULL);
  }

  Subscribe* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Subscribe>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscribe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string event = 1;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // @@protoc_insertion_point(class_scope:cellaserv.Subscribe)
 private:
  void set_has_event();
  void clear_has_event();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  friend struct ::protobuf_cellaserv_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Publish : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cellaserv.Publish) */ {
 public:
  Publish();
  virtual ~Publish();

  Publish(const Publish& from);

  inline Publish& operator=(const Publish& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Publish(Publish&& from) noexcept
    : Publish() {
    *this = ::std::move(from);
  }

  inline Publish& operator=(Publish&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Publish& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Publish* internal_default_instance() {
    return reinterpret_cast<const Publish*>(
               &_Publish_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Publish* other);
  friend void swap(Publish& a, Publish& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Publish* New() const final {
    return CreateMaybeMessage<Publish>(NULL);
  }

  Publish* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Publish>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Publish& from);
  void MergeFrom(const Publish& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Publish* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string event = 1;
  bool has_event() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  const ::std::string& event() const;
  void set_event(const ::std::string& value);
  #if LANG_CXX11
  void set_event(::std::string&& value);
  #endif
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  ::std::string* mutable_event();
  ::std::string* release_event();
  void set_allocated_event(::std::string* event);

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:cellaserv.Publish)
 private:
  void set_has_event();
  void clear_has_event();
  void set_has_data();
  void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr event_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend struct ::protobuf_cellaserv_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// required .cellaserv.Message.MessageType type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cellaserv::Message_MessageType Message::type() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.type)
  return static_cast< ::cellaserv::Message_MessageType >(type_);
}
inline void Message::set_type(::cellaserv::Message_MessageType value) {
  assert(::cellaserv::Message_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Message.type)
}

// required bytes content = 2;
inline bool Message::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
inline const ::std::string& Message::content() const {
  // @@protoc_insertion_point(field_get:cellaserv.Message.content)
  return content_.GetNoArena();
}
inline void Message::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Message.content)
}
#if LANG_CXX11
inline void Message::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Message.content)
}
#endif
inline void Message::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Message.content)
}
inline void Message::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Message.content)
}
inline ::std::string* Message::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:cellaserv.Message.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_content() {
  // @@protoc_insertion_point(field_release:cellaserv.Message.content)
  if (!has_content()) {
    return NULL;
  }
  clear_has_content();
  return content_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Message.content)
}

// -------------------------------------------------------------------

// Register

// required string name = 1;
inline bool Register::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Register::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Register::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Register::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Register::name() const {
  // @@protoc_insertion_point(field_get:cellaserv.Register.name)
  return name_.GetNoArena();
}
inline void Register::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Register.name)
}
#if LANG_CXX11
inline void Register::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Register.name)
}
#endif
inline void Register::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Register.name)
}
inline void Register::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Register.name)
}
inline ::std::string* Register::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:cellaserv.Register.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_name() {
  // @@protoc_insertion_point(field_release:cellaserv.Register.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Register.name)
}

// optional string identification = 2;
inline bool Register::has_identification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Register::set_has_identification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Register::clear_has_identification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Register::clear_identification() {
  identification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_identification();
}
inline const ::std::string& Register::identification() const {
  // @@protoc_insertion_point(field_get:cellaserv.Register.identification)
  return identification_.GetNoArena();
}
inline void Register::set_identification(const ::std::string& value) {
  set_has_identification();
  identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Register.identification)
}
#if LANG_CXX11
inline void Register::set_identification(::std::string&& value) {
  set_has_identification();
  identification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Register.identification)
}
#endif
inline void Register::set_identification(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_identification();
  identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Register.identification)
}
inline void Register::set_identification(const char* value, size_t size) {
  set_has_identification();
  identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Register.identification)
}
inline ::std::string* Register::mutable_identification() {
  set_has_identification();
  // @@protoc_insertion_point(field_mutable:cellaserv.Register.identification)
  return identification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Register::release_identification() {
  // @@protoc_insertion_point(field_release:cellaserv.Register.identification)
  if (!has_identification()) {
    return NULL;
  }
  clear_has_identification();
  return identification_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Register::set_allocated_identification(::std::string* identification) {
  if (identification != NULL) {
    set_has_identification();
  } else {
    clear_has_identification();
  }
  identification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identification);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Register.identification)
}

// -------------------------------------------------------------------

// Request

// required string service_name = 1;
inline bool Request::has_service_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_service_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_service_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_name();
}
inline const ::std::string& Request::service_name() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.service_name)
  return service_name_.GetNoArena();
}
inline void Request::set_service_name(const ::std::string& value) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.service_name)
}
#if LANG_CXX11
inline void Request::set_service_name(::std::string&& value) {
  set_has_service_name();
  service_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.service_name)
}
#endif
inline void Request::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.service_name)
}
inline void Request::set_service_name(const char* value, size_t size) {
  set_has_service_name();
  service_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.service_name)
}
inline ::std::string* Request::mutable_service_name() {
  set_has_service_name();
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.service_name)
  return service_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_service_name() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.service_name)
  if (!has_service_name()) {
    return NULL;
  }
  clear_has_service_name();
  return service_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_service_name(::std::string* service_name) {
  if (service_name != NULL) {
    set_has_service_name();
  } else {
    clear_has_service_name();
  }
  service_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.service_name)
}

// optional string service_identification = 2;
inline bool Request::has_service_identification() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_service_identification() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_service_identification() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_service_identification() {
  service_identification_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_service_identification();
}
inline const ::std::string& Request::service_identification() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.service_identification)
  return service_identification_.GetNoArena();
}
inline void Request::set_service_identification(const ::std::string& value) {
  set_has_service_identification();
  service_identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.service_identification)
}
#if LANG_CXX11
inline void Request::set_service_identification(::std::string&& value) {
  set_has_service_identification();
  service_identification_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.service_identification)
}
#endif
inline void Request::set_service_identification(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_service_identification();
  service_identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.service_identification)
}
inline void Request::set_service_identification(const char* value, size_t size) {
  set_has_service_identification();
  service_identification_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.service_identification)
}
inline ::std::string* Request::mutable_service_identification() {
  set_has_service_identification();
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.service_identification)
  return service_identification_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_service_identification() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.service_identification)
  if (!has_service_identification()) {
    return NULL;
  }
  clear_has_service_identification();
  return service_identification_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_service_identification(::std::string* service_identification) {
  if (service_identification != NULL) {
    set_has_service_identification();
  } else {
    clear_has_service_identification();
  }
  service_identification_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_identification);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.service_identification)
}

// required string method = 3;
inline bool Request::has_method() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_method() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_method() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
inline const ::std::string& Request::method() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.method)
  return method_.GetNoArena();
}
inline void Request::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.method)
}
#if LANG_CXX11
inline void Request::set_method(::std::string&& value) {
  set_has_method();
  method_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.method)
}
#endif
inline void Request::set_method(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.method)
}
inline void Request::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.method)
}
inline ::std::string* Request::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_method() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.method)
  if (!has_method()) {
    return NULL;
  }
  clear_has_method();
  return method_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.method)
}

// optional bytes data = 4;
inline bool Request::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.data)
  return data_.GetNoArena();
}
inline void Request::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Request.data)
}
#if LANG_CXX11
inline void Request::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Request.data)
}
#endif
inline void Request::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Request.data)
}
inline void Request::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Request.data)
}
inline ::std::string* Request::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:cellaserv.Request.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Request.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Request.data)
}

// required fixed64 id = 99;
inline bool Request::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Request::id() const {
  // @@protoc_insertion_point(field_get:cellaserv.Request.id)
  return id_;
}
inline void Request::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Request.id)
}

// -------------------------------------------------------------------

// Reply_Error

// required .cellaserv.Reply.Error.Type type = 1;
inline bool Reply_Error::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply_Error::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply_Error::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply_Error::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::cellaserv::Reply_Error_Type Reply_Error::type() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.Error.type)
  return static_cast< ::cellaserv::Reply_Error_Type >(type_);
}
inline void Reply_Error::set_type(::cellaserv::Reply_Error_Type value) {
  assert(::cellaserv::Reply_Error_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Reply.Error.type)
}

// optional string what = 2;
inline bool Reply_Error::has_what() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply_Error::set_has_what() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply_Error::clear_has_what() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply_Error::clear_what() {
  what_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_what();
}
inline const ::std::string& Reply_Error::what() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.Error.what)
  return what_.GetNoArena();
}
inline void Reply_Error::set_what(const ::std::string& value) {
  set_has_what();
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.Error.what)
}
#if LANG_CXX11
inline void Reply_Error::set_what(::std::string&& value) {
  set_has_what();
  what_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Reply.Error.what)
}
#endif
inline void Reply_Error::set_what(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_what();
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Reply.Error.what)
}
inline void Reply_Error::set_what(const char* value, size_t size) {
  set_has_what();
  what_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Reply.Error.what)
}
inline ::std::string* Reply_Error::mutable_what() {
  set_has_what();
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.Error.what)
  return what_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reply_Error::release_what() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.Error.what)
  if (!has_what()) {
    return NULL;
  }
  clear_has_what();
  return what_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reply_Error::set_allocated_what(::std::string* what) {
  if (what != NULL) {
    set_has_what();
  } else {
    clear_has_what();
  }
  what_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), what);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.Error.what)
}

// -------------------------------------------------------------------

// Reply

// optional bytes data = 1;
inline bool Reply::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Reply::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.data)
  return data_.GetNoArena();
}
inline void Reply::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Reply.data)
}
#if LANG_CXX11
inline void Reply::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Reply.data)
}
#endif
inline void Reply::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Reply.data)
}
inline void Reply::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Reply.data)
}
inline ::std::string* Reply::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Reply::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Reply::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.data)
}

// optional .cellaserv.Reply.Error error = 2;
inline bool Reply::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
inline const ::cellaserv::Reply_Error& Reply::_internal_error() const {
  return *error_;
}
inline const ::cellaserv::Reply_Error& Reply::error() const {
  const ::cellaserv::Reply_Error* p = error_;
  // @@protoc_insertion_point(field_get:cellaserv.Reply.error)
  return p != NULL ? *p : *reinterpret_cast<const ::cellaserv::Reply_Error*>(
      &::cellaserv::_Reply_Error_default_instance_);
}
inline ::cellaserv::Reply_Error* Reply::release_error() {
  // @@protoc_insertion_point(field_release:cellaserv.Reply.error)
  clear_has_error();
  ::cellaserv::Reply_Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::cellaserv::Reply_Error* Reply::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::cellaserv::Reply_Error>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:cellaserv.Reply.error)
  return error_;
}
inline void Reply::set_allocated_error(::cellaserv::Reply_Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Reply.error)
}

// required fixed64 id = 99;
inline bool Reply::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Reply::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Reply::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Reply::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Reply::id() const {
  // @@protoc_insertion_point(field_get:cellaserv.Reply.id)
  return id_;
}
inline void Reply::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:cellaserv.Reply.id)
}

// -------------------------------------------------------------------

// Subscribe

// required string event = 1;
inline bool Subscribe::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscribe::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subscribe::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subscribe::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event();
}
inline const ::std::string& Subscribe::event() const {
  // @@protoc_insertion_point(field_get:cellaserv.Subscribe.event)
  return event_.GetNoArena();
}
inline void Subscribe::set_event(const ::std::string& value) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Subscribe.event)
}
#if LANG_CXX11
inline void Subscribe::set_event(::std::string&& value) {
  set_has_event();
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Subscribe.event)
}
#endif
inline void Subscribe::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Subscribe.event)
}
inline void Subscribe::set_event(const char* value, size_t size) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Subscribe.event)
}
inline ::std::string* Subscribe::mutable_event() {
  set_has_event();
  // @@protoc_insertion_point(field_mutable:cellaserv.Subscribe.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscribe::release_event() {
  // @@protoc_insertion_point(field_release:cellaserv.Subscribe.event)
  if (!has_event()) {
    return NULL;
  }
  clear_has_event();
  return event_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscribe::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Subscribe.event)
}

// -------------------------------------------------------------------

// Publish

// required string event = 1;
inline bool Publish::has_event() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Publish::set_has_event() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Publish::clear_has_event() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Publish::clear_event() {
  event_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_event();
}
inline const ::std::string& Publish::event() const {
  // @@protoc_insertion_point(field_get:cellaserv.Publish.event)
  return event_.GetNoArena();
}
inline void Publish::set_event(const ::std::string& value) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Publish.event)
}
#if LANG_CXX11
inline void Publish::set_event(::std::string&& value) {
  set_has_event();
  event_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Publish.event)
}
#endif
inline void Publish::set_event(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Publish.event)
}
inline void Publish::set_event(const char* value, size_t size) {
  set_has_event();
  event_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Publish.event)
}
inline ::std::string* Publish::mutable_event() {
  set_has_event();
  // @@protoc_insertion_point(field_mutable:cellaserv.Publish.event)
  return event_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Publish::release_event() {
  // @@protoc_insertion_point(field_release:cellaserv.Publish.event)
  if (!has_event()) {
    return NULL;
  }
  clear_has_event();
  return event_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Publish::set_allocated_event(::std::string* event) {
  if (event != NULL) {
    set_has_event();
  } else {
    clear_has_event();
  }
  event_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Publish.event)
}

// optional bytes data = 2;
inline bool Publish::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Publish::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Publish::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Publish::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Publish::data() const {
  // @@protoc_insertion_point(field_get:cellaserv.Publish.data)
  return data_.GetNoArena();
}
inline void Publish::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cellaserv.Publish.data)
}
#if LANG_CXX11
inline void Publish::set_data(::std::string&& value) {
  set_has_data();
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:cellaserv.Publish.data)
}
#endif
inline void Publish::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cellaserv.Publish.data)
}
inline void Publish::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cellaserv.Publish.data)
}
inline ::std::string* Publish::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:cellaserv.Publish.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Publish::release_data() {
  // @@protoc_insertion_point(field_release:cellaserv.Publish.data)
  if (!has_data()) {
    return NULL;
  }
  clear_has_data();
  return data_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Publish::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:cellaserv.Publish.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cellaserv

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::cellaserv::Message_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cellaserv::Message_MessageType>() {
  return ::cellaserv::Message_MessageType_descriptor();
}
template <> struct is_proto_enum< ::cellaserv::Reply_Error_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::cellaserv::Reply_Error_Type>() {
  return ::cellaserv::Reply_Error_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cellaserv_2eproto
